#include <iostream>
#include <complex>
#include <algorithm>
#include <math.h>
#include <chrono>
#include <random>
#include <fstream>
#include <string>
#include <Eigen/Dense>
#include "WMath.h"
#include "WFrame.h"
#include "Coulomb_corr.h"
#include "WFit.h"
#include "T_slice.h"
#include "Exp_model.h"
#include "Cornell_model.h"

using namespace std;
using namespace WMath;
using namespace Eigen;
using namespace WFit;

int main(int argc, char **argv)
{
	/*
	STRATEGY:
	Given N samples of a correlator G(R,T) at fixed beta, xi
	create N jackknife samples G_n(R,T)
	Slice the data in R, so that we are fitting on G_n(T)|fixed R (Coulomb_T_slice)
	Fit the collection of jackknkife samples, use akaike information criteria to select the best model
	Use the best model to individually fit each jackknife sample, extract the part which is linear in T in the exponent and set it = V_n(R)
	Use best model fit parameters to set initial guess, step size
	Fit each jackknife sample to Cornell, weighting by the estimated error in V_n(R) from MINUIT
	Use Jackknife stat stuff to estimate the string tension

	Need to separately calculate the wilson string tension in the same units to divide
	*/
	int R = atoi(argv[1]);
	int T = atoi(argv[2]);
	/*
	Coulomb_corr G251 = Coulomb_corr(R, T);
	G251.load({"./2.5-1_GRT.txt"});
	G251.truncate(0, 2, 0, 2);
	G251.trim();
	cout<<G251<<endl;
	T_slice G251_R1 = T_slice(G251,1,3);
	cout<<G251_R1<<endl;
	G251_R1.jackknife_self();
	cout<<G251_R1<<endl;
*/
	// Exp_pol(polynomial_degree, pole_degree, index t_start, index t_end, length of vector in T)
	// WModel* ptr = new Exp_pol(2,1,0,3,4);
	double py_degree = 2;
	double pl_degree = 1;
	double t_start = 0;
	double t_end = 7;
	double t_max = 10;
	int n_params_t = py_degree + pl_degree + 1;
	Exp_model exp = Exp_model();
	exp.init({py_degree, pl_degree, t_start, t_end, t_max}, n_params_t, "");
	WModel *m = &exp;

	double pars[n_params_t] = {1.2, 0.5, 0.1, 3};
	double range_t = 0.05;
	int n_samples_t = 100;

	MatrixXd test_dat_t = MatrixXd::Zero(t_max, n_samples_t);
	VectorXd err_vec_t = VectorXd::Zero(t_max);

	for (int i = t_start; i <= t_end; i++)
	{
		err_vec_t(i) = range_t;
	}

	VectorXd actual_t = m->evaluate(pars);

	for (int i = 0; i < n_samples_t; i++)
	{
		test_dat_t.col(i) = actual_t.array() + VectorXd::Random(t_max).array() * (err_vec_t.array());
	}

	cout << "Actual G(T):" << endl
		 << actual_t << endl;
	cout << "Samples:" << endl
		 << test_dat_t << endl;

	set_model(m);
	load_data(&test_dat_t);
	// initial guess for parameters
	set_params({1, 1, 1, 1});
	// initial step sizes
	set_steps({0.5, 0.5, 0.5, 0.5});
	// Max func calls, max iter, tolerance, printlevel
	set_options({100000, 10000, .001, 1});
	minimize();

	int R_max = 10;
	int n_h_params = 3;
	Cornell_model cornell = Cornell_model();
	WModel *c = &cornell;
	//{start_index,end_index,total_length}
	double r_start = 2;
	double r_end = 7;
	double r_max = 10;
	vector<double> h_params = {r_start, r_end, r_max};

	c->init(h_params, 3, "");
	//{A,B,sigma} for A+B/R + sigma R
	double params[3] = {1, 2.3, 5};
	int n_samples = 10;
	// matrix has R_max rows, and n_sample columns
	MatrixXd test_dat = MatrixXd::Zero(r_max, n_samples);
	VectorXd actual = c->evaluate(params);
	double range = 0.1;

	VectorXd err_vec = VectorXd::Zero(10);
	for (int i = 2; i <= 7; i++)
	{
		err_vec(i) = pow(range,i);
	}

	for (int i = 0; i < n_samples; i++)
	{
		test_dat.col(i) = actual.array() + VectorXd::Random(10).array() * (err_vec.array());
	}
	cout << "Actual V(r):" << endl
		 << actual << endl;
	cout << "Samples:" << endl
		 << test_dat << endl;

	set_model(c);
	load_data(&test_dat);
	// initial guess for parameters
	set_params({1, 1, 1});
	// initial step sizes
	set_steps({0.5, 0.5, 0.5});
	// Max func calls, max iter, tolerance, printlevel
	set_options({10000, 1000, .01, 1});
	minimize();

	return 0;
}
